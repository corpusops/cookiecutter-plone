##############################################################################
# Project specific settings
##############################################################################
#{% set sentryc = cookiecutter.sentry_dsn and '#' or '' %}
[v]
eggs =
    ${v:mainegg}
    Plone
    Pillow
{{sentryc}}    collective.sentry
filesystem-parts =
    mkdirs
project-parts-pre-zeo =
#   env
#   grp
#   filestorage
#   productdistros
project-parts-post-zeo =
    instance-plain
    instance
    zopepy
#   omelette
#   releaser
#   test
#   robot
project-without-zeo-parts =
    ${v:project-parts-pre-zeo}
    ${v:project-parts-post-zeo}
project-parts =
    ${v:project-parts-pre-zeo}
    zeoserver
    ${v:project-parts-post-zeo}

[buildout]
versions=versions
sources = sources
develop = .
# project packages
eggs = ${v:eggs}
zcml =${v:mainegg}
# extra directories oto add to the python path
extra-paths =

# auto tracked developement products
[sources]

[remotes]
# Plone
plone = https://github.com/plone
plone_push = git@github.com:plone
svn_plone = https://svn.plone.org/svn/plone
#svn_plone = http://svn.plone.org/svn/plone
# Collective
collective = https://github.com/collective
collective_push = git@github.com:collective
svn_collective = https://svn.plone.org/svn/collective
#svn_collective = http://svn.plone.org/svn/collective
# Makina GitHub
makina_github = https://github.com/makinacorpus
makina_github_push = git@github.com:makinacorpus

plomino = https://github.com/plomino

# for multi datafs support
# [filestorage]
# recipe = collective.recipe.filestorage
# blob-storage = ${locations:blob_storages}/storage-%(fs_part_name)s
# location = ${locations:filestorages}/%(fs_part_name)s.fs
# parts =
#     pack01

[locations]
zope2=${buildout:parts-directory}/zope2
instance=${buildout:parts-directory}/instance
productdistros=${buildout:parts-directory}/productdistros
zeoserver=${buildout:parts-directory}/zeoserver

[zeoserver]
recipe = plone.recipe.zeoserver
zeopack-script-name=zeoserver-zeopack
pack-days=${v:zeo-pack-days}
file-storage = ${locations:filestorage}
blob-storage = ${locations:blob_storage}
zeo-address = ${hosts:zeo}:${ports:zeo}
socket-name = ${buildout:directory}/var/zeo.zdsock
zeo-conf-additional =
zeo-log = ${locations:logs_dir}/${:_buildout_section_name_}.log
eggs = ZopeUndo
    ZODB3
    plone.app.blob

[instance]
recipe = plone.recipe.zope2instance
instance-zeo-address=${zeoserver:zeo-address}
verbose-security=${v:verbose-security}
event-log = ${locations:logs_dir}/${:_buildout_section_name_}.log
z2-log = ${locations:logs_dir}/${:_buildout_section_name_}-Z2.log
zeo-client-cache-size = ${v:zeo-client-cache-size}
zeo-client = on
zeo-address = ${:instance-zeo-address}
temporary-storage =
    <zeoclient>
    server ${:instance-zeo-address}
        storage temp
        name zeostorage
        var ${buildout:directory}/var
    </zeoclient>
    mount-point /temp_folder
    container-class Products.TemporaryFolder.TemporaryContainer

blob-storage = ${zeoserver:blob-storage}
shared-blob = on
http-address = ${hosts:instance}:${ports:instance}
user = ${v:admin-user}:${v:admin-password}
session-timeout-minutes = ${v:session-timeout-minutes}
event-log-level = ${v:event-log-level}
z2-log-level = ${v:z2-log-level}
#webdav-address = ${hosts:webdav}:${ports:webdav}
zodb-cache-size = 50000

# attacking zopepy:eggs make instance be built after zopepy
# in any case thx to the buildout automatic parts sort.
extra-paths = ${buildout:extra-paths}
eggs = ${buildout:eggs}
# DONT EVER REMOVE OLD PRODUCTS, this is how we enable hotfixes !
products = ${buildout:directory}/products
#           ${locations:productdistros}
zcml = ${buildout:zcml}
environment-vars =
    zope_i18n_compile_mo_files true
    TMPDIR ${locations:tmp}

# Use this section to download additional old-style products.
# List any number of URLs for product tarballs under URLs (separate
# with whitespace, or break over several lines, with subsequent lines
# indented). If any archives contain several products inside a top-level
# directory, list the archive file name (i.e. the last part of the URL,
# normally with a .tar.gz suffix or similar) under 'nested-packages'.
# If any archives extract to a product directory with a version suffix, list
# the archive name under 'version-suffix-packages'.
[productdistros]
# For more information on this step and configuration options see:
# http://pypi.python.org/pypi/plone.recipe.distros
recipe = plone.recipe.distros
urls=${groups:products-urls}
version-suffix-packages = ${groups:version-suffix-packages}
nested-packages = ${groups:nested-packages}

[instance-plain]
<= instance
zeo-client = off
zeo-address =
temporary-storage =

# eggs & scripts installation
[zopepy]
recipe = zc.recipe.egg
interpreter = zopepy
eggs = ${instance:eggs}
extra-paths = ${instance:extra-paths}

# zope.testing testrunner support
[testenv]
INSTANCE_HOME = ${locations:instance}
CONFIG_FILE = ${locations:instance}/etc/zope.conf
CATALOG_OPTIMIZATION_DISABLED = 1

[omelette]
recipe = collective.recipe.omelette
eggs = ${instance:eggs}
packages = ./
    ${instance:extra-paths}

# Command below is important
[mkdirs]
recipe = plone.recipe.command
update-command = ${mkdirs:command}
command =
    mkdir -pv ${locations:filestorages};
    mkdir -pv ${locations:blob_storages};
    mkdir -pv ${locations:blob_storage};
    mkdir -pv ${locations:backups};
    mkdir -pv ${locations:snapshot_backups};
    mkdir -pv ${locations:blob_backups};
    mkdir -pv ${locations:snapshot_blob_backups};
    mkdir -pv ${locations:tmp};

# [env]
# recipe = collective.recipe.environment
# PS1 =
# TERMCAP =
# SSH_CLIENT =
# SSH_TTY =
# SSH_CONNECTION =
# LANG =
# SHELL =
#
# [grp]
# recipe = collective.recipe.grp

# [lxml]
# recipe = z3c.recipe.staticlxml
# egg = lxml
# build-libxslt = true
# build-libxml2 = true
# libxslt-url = http://gentoo.tiscali.nl/distfiles/libxslt-${versions:libxslt}.tar.gz
# libxml2-url = http://gentoo.tiscali.nl/distfiles/libxml2-${versions:libxml2}.tar.gz

[groups]
# OLD ZOPE2 PRODUCTS SUPPORT
products-urls =
version-suffix-packages =
nested-packages =

[nodejs]
recipe = gp.recipe.node
url = http://nodejs.org/dist/v${versions:nodejs}/node-v${versions:nodejs}.tar.gz
nmps = less
scripts = lessc

[test]
recipe = zc.recipe.testrunner
defaults = ['--exit-with-status', '--auto-color', '--auto-progress', '-s', '${v:mainegg}']
eggs =
    plone.app.upgrade
    Plone
    ${v:mainegg} [test]
    ${instance:eggs}
environment = testenv
extra-paths = ${zopepy:extra-paths}

[robot]
recipe = zc.recipe.egg
eggs =
    ${test:eggs}
    plone.app.robotframework[debug,ride,reload]

[createcoverage]
recipe = zc.recipe.egg
eggs = createcoverage

[flake8]
recipe = zc.recipe.egg
eggs = flake8

[mrbob]
recipe = zc.recipe.egg
eggs =
    mr.bob
    bobtemplates.plone

#[mockup-build]
#recipe = zc.recipe.egg
#eggs =
#    ${buildout:eggs}
#    Products.CMFPlone
#interpreter = zopepy
#scripts =
#    plone-generate-gruntfile
#    plone-compile-resources
# vim:set ft=cfg:
